# Generated by Django 2.0.7 on 2018-08-12 10:50
from django.contrib.auth.hashers import make_password
from django.db import migrations


def add_groups(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Group.objects.bulk_create([
        Group(name=u'employee'),
        Group(name=u'customer'),
        Group(name=u'manager'),
        Group(name=u'staff'),
        Group(name=u'wallet_user'),
    ])


def remove_groups(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Group.objects.all().delete()


def add_admin(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    superuser = User()
    superuser.is_active = True
    superuser.is_superuser = True
    superuser.is_staff = True
    superuser.username = 'newadmin'
    superuser.email = 'admin@admin.net'
    superuser.password = make_password('adminadmin')
    superuser.save()


def remove_admin(apps, schema_editor):
    User.objects.get(username="newadmin")


def add_customer(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Customer = apps.get_model('customer', 'Customer')
    try:
        customer = Customer.objects.get(username='customer', email='customer@customer.com')
    except:
        customer = Customer(username='customer', email='customer@customer.com')
        customer.password = make_password('customercustomer')
        customer.save()
        customer_group = Group.objects.get(name='customer')
        customer_group.user_set.add(customer)
        customer_group = Group.objects.get(name='wallet_user')
        customer_group.user_set.add(customer)


def remove_customer(apps, schema_editor):
    Customer = apps.get_model('customer', 'Customer')
    try:
        customer = Customer.objects.get(username='customer')
        customer.delete()
    except:
        pass


def add_employee(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Employee = apps.get_model('employee', 'Employee')
    try:
        employee = Employee.objects.get(username='employee', email='employee@employee.com')
    except:
        employee = Employee(username='employee', email='employee@employee.com', current_salary=20)
        employee.password = make_password('employeeemployee')
        employee.save()
        employee_group = Group.objects.get(name='employee')
        employee_group.user_set.add(employee)
        employee_group = Group.objects.get(name='staff')
        employee_group.user_set.add(employee)


def remove_employee(apps, schema_editor):
    Employee = apps.get_model('employee', 'Employee')
    try:
        employee = Employee.objects.get(username='employee')
        employee.delete()
    except:
        pass


def add_manager(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Manager = apps.get_model('manager', 'Manager')
    try:
        manager = Manager.objects.get(username='manager', email='manager@manager.com')
    except:
        manager = Manager(username='manager', email='manager@manager.com', rial_credit=12, dollar_cent_credit=342, euro_cent_credit=324, account_number="134123123")
        manager.password = make_password('managermanager')
        manager.save()
        manager_group = Group.objects.get(name='manager')
        manager_group.user_set.add(manager)
        manager_group = Group.objects.get(name='wallet_user')
        manager_group.user_set.add(manager)
        manager_group = Group.objects.get(name='staff')
        manager_group.user_set.add(manager)


def remove_manager(apps, schema_editor):
    Manager = apps.get_model('manager', 'Manager')
    try:
        manager = Manager.objects.get(username='manager')
        manager.delete()
    except:
        pass


def add_charge(apps, schema_editor):
    Customer = apps.get_model('customer', 'Customer')
    Charge = apps.get_model('customer', 'Charge')
    customer = Customer.objects.get(username='customer', email='customer@customer.com')
    for i in range(0, 5):
        charge = Charge(dest_user=customer, creator=customer, dest_wallet="0", amount=i*10)
        customer.rial_credit += i*10000000000000
        charge.save()
        customer.save()
    ContentType = apps.get_model('contenttypes', 'ContentType')
    new_ct = ContentType.objects.get_for_model(Charge)
    Charge.objects.filter(polymorphic_ctype__isnull=True).update(polymorphic_ctype=new_ct)


def remove_charge(apps, schema_editor):
    Customer = apps.get_model('customer', 'Customer')
    Charge = apps.get_model('customer', 'Charge')
    customer = Customer.objects.get(username='customer', email='customer@customer.com')
    charges = Charge.objects.get(dest_user=customer)
    charges.delete()


def add_exchange(apps, schema_editor):
    Customer = apps.get_model('customer', 'Customer')
    Exchange = apps.get_model('customer', 'Exchange')
    customer = Customer.objects.get(username='customer', email='customer@customer.com')
    exchange = Exchange(source_user=customer, source_wallet="0", creator=customer, amount=100000, dest_wallet="1")
    customer.rial_credit -= 100000
    customer.dollar_cent_credit += 1000
    exchange.save()
    exchange = Exchange(source_user=customer, source_wallet="0", creator=customer,  amount=100000, dest_wallet="2")
    customer.rial_credit -= 100000
    customer.euro_cent_credit += 1000
    exchange.save()
    customer.save()
    ContentType = apps.get_model('contenttypes', 'ContentType')
    new_ct = ContentType.objects.get_for_model(Exchange)
    Exchange.objects.filter(polymorphic_ctype__isnull=True).update(polymorphic_ctype=new_ct)


def remove_exchange(apps, schema_editor):
    Customer = apps.get_model('customer', 'Customer')
    Exchange = apps.get_model('customer', 'Exchange')
    customer = Customer.objects.get(username='customer', email='customer@customer.com')
    Customer = apps.get_model('customer', 'Customer')
    exchanges = Exchange.objects.get(source_user=customer)
    exchanges.delete()


def add_foreignTrans(apps, schema_editor):
    Customer = apps.get_model('customer', 'Customer')
    BankTrans = apps.get_model('customer', 'BankTrans')
    customer = Customer.objects.get(username='customer', email='customer@customer.com')
    foreignTrans = BankTrans(source_user=customer, creator=customer, source_wallet="0", amount=30000, account_number='12312412', bank_name='mammadbagherbank')
    customer.rial_credit -= 30000 + 3000 * foreignTrans.profitRate
    foreignTrans.save()
    foreignTrans = BankTrans(source_user=customer, creator=customer, source_wallet="1", amount=100, account_number='12312412', bank_name='mammadbagherbank')
    customer.dollar_cent_credit -= 100*(1*foreignTrans.profitRate)
    foreignTrans.save()
    foreignTrans = BankTrans(source_user=customer, creator=customer, source_wallet="1", amount=100, account_number='12312412', bank_name='mammadbagherbank')
    customer.dollar_cent_credit -= 100*(1*foreignTrans.profitRate)
    foreignTrans.save()
    foreignTrans = BankTrans(source_user=customer, creator=customer, source_wallet="1", amount=100, account_number='12312412', bank_name='mammadbagherbank')
    customer.dollar_cent_credit -= 100*(1*foreignTrans.profitRate)
    foreignTrans.save()
    foreignTrans = BankTrans(source_user=customer, creator=customer, source_wallet="2", amount=100, account_number='12312412', bank_name='mammadbagherbank')
    customer.euro_cent_credit -= 100*(1*foreignTrans.profitRate)
    foreignTrans.save()
    foreignTrans = BankTrans(source_user=customer, creator=customer, source_wallet="2", amount=100, account_number='12312412', bank_name='mammadbagherbank')
    customer.euro_cent_credit -= 100*(1*foreignTrans.profitRate)
    foreignTrans.save()
    foreignTrans = BankTrans(source_user=customer, creator=customer, source_wallet="2", amount=100, account_number='12312412', bank_name='mammadbagherbank')
    customer.euro_cent_credit -= 100*(1*foreignTrans.profitRate)
    foreignTrans.save()
    customer.save()
    ContentType = apps.get_model('contenttypes', 'ContentType')
    new_ct = ContentType.objects.get_for_model(BankTrans)
    BankTrans.objects.filter(polymorphic_ctype__isnull=True).update(polymorphic_ctype=new_ct)


def remove_foreignTrans(apps, schema_editor):
    Customer = apps.get_model('customer', 'Customer')
    BankTrans = apps.get_model('customer', 'Exchange')
    customer = Customer.objects.get(username='customer', creator=customer,  email='customer@customer.com')
    Customer = apps.get_model('customer', 'Customer')
    foreignTrans = BankTrans.objects.get(source_user=customer)
    foreignTrans.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0001_initial'),
        ('customer', '0001_initial'),
        ('manager', '0001_initial'),
        ('employee', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(add_groups, remove_groups),
        migrations.RunPython(add_admin, remove_admin),
        migrations.RunPython(add_customer, remove_customer),
        migrations.RunPython(add_employee, remove_employee),
        migrations.RunPython(add_manager, remove_manager),
        migrations.RunPython(add_charge, remove_charge),
        migrations.RunPython(add_exchange, remove_exchange),
        migrations.RunPython(add_foreignTrans, remove_foreignTrans),
    ]
